// Se uso la alternativa 1: Usando submit() y Future

Quiero un programa en Java 24, utilizando Callable, Future y ExecutorService para simular un torneo de 16 jugadores en formato de eliminación directa.

Cada partido se juega al mejor de 3 sets, gana quien gane primero 2 sets, y el ganador de cada partido debe ser generado en un método aleatorio. El ganador de cada partido avanza a la siguiente ronda. Las rondas se juegan en simultáneo, es decir, la siguiente ronda inicia solo cuando todos los partidos de la ronda actual han finalizado. Simula el tiempo de duración de cada partido en un rango de 1.5 a 2 segundos.

El torneo consta de 4 rondas: Octavos de Final, Cuartos de Final, Semifinal, Final

Además, por cada set se debe imprimir el ganador del set.

Al final de cada partido, se imprime el resultado global del partido y quién avanza.

En caso de que haya empate después de 2 sets, se juega un tercer set obligatorio.

El torneo debe continuar hasta encontrar al campeón final.

Importante, el emparejamiento debe seguir el patrón clásico de torneo, donde: En Octavos de Final: Jugador 1 vs Jugador 16, Jugador 2 vs Jugador 15, Jugador 3 vs Jugador 14, asi sucesivamente hasta Jugador 8 vs Jugador 9.
, Ganador del partido 3 vs Ganador del partido 4, asi sucesivamente

En Semifinal y Final se mantiene el mismo patrón secuencial.

Necesito 3 alternativas diferentes usando Callable, Future y ExecutorService

A continuación, te argumento un código de ejemplo sobre Callable, Future y ExecutorService:

public static void main(String[] args) throws IOException {
        String pathToCSV = "data.csv";

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS Z");

        var csvFormat = CSVFormat.RFC4180.builder()
                .setHeader()
                .setSkipHeaderRecord(true)
                .build();

        // Usar ConcurrentMap para procesamiento paralelo y seguro, con el objetivo de
        // unir cada Futuro con su Hilo subido para saber que resultado pertenece a cada anio
        // ConcurrentMap<Integer, Future<String>>

        ConcurrentMap<Integer, List<ClimateRecord>> dataByYear;

        try (Reader reader = Files.newBufferedReader(Paths.get(pathToCSV));
             CSVParser parser = new CSVParser(reader, csvFormat)) {

            dataByYear = parser.stream()
                    .parallel() // procesamiento paralelo
                    .map(AppFP::getClimateRecord) // convertir a ClimateRecord
                    .collect(Collectors.groupingByConcurrent(
                            ClimateRecord::year,
                            Collectors.toList()
                    ));
        }

        // Crear hilos por año
        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

        List<Future<String>> futures = dataByYear.entrySet().stream()
                .map(entry -> executor.submit(() -> {
                    int year = entry.getKey();
                    List<ClimateRecord> records = entry.getValue();

                    double avg = records.stream()
                            .mapToDouble(ClimateRecord::temperature)
                            .average()
                            .orElse(Double.NaN);

                    return "Año " + year + ": Promedio = " + avg;
                }))
                .toList();

        // Esperar resultados e imprimir
        futures.forEach(future -> {
            try {
                System.out.println(future.get());
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        });

        executor.shutdown();
    }
}


public record ClimateRecord(int year, double temperature) {
    public static ClimateRecord fromCSV(CSVRecord record, DateTimeFormatter formatter) {
        OffsetDateTime date = OffsetDateTime.parse(record.get("Formatted Date").trim(), formatter);
        double temp = Double.parseDouble(record.get("Temperature").trim());
        return new ClimateRecord(date.getYear(), temp);
    }
}